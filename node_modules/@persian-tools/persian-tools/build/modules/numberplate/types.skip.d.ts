export interface PlateResult {
    info: PlateResultApi;
    isValid: boolean;
}
export interface PlateApi {
    number: string;
    char?: string;
}
export declare enum PlateTypes {
    Car = 1,
    Motorcycle = 2
}
export type PlateResultApiTypeString = keyof typeof PlateTypes;
export interface PlateResultDetailModel {
    firstTwoDigits: string;
    plateCharacter: string | null;
    nextThreeDigits: string;
    provinceCode: string;
}
export interface PlateResultMotorcycleDetailModel {
    digits: string;
    provinceCode: string;
}
export interface PlateResultApi {
    template: string;
    province: string | null;
    type: PlateResultApiTypeString;
    details: PlateResultDetailModel | PlateResultMotorcycleDetailModel;
    category: string | null;
}
export type PlateOptions = string | PlateApi;
export type ProvinceObject = Array<{
    province: string;
    codes: Array<number>;
}>;
export interface NormalizedPlate {
    numbers: string;
    char: string | undefined;
}
